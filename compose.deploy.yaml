#this compose file is only to be run for deployment. There will only be very minor changes with the development, the largest one being the additional swag service to direct network requests

#All services that are apart of the application
services:
  swag: #reverse proxy
    image: lscr.io/linuxserver/swag:latest
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - URL=shuigraph.socs.uoguelph.ca
      - VALIDATION=http
      - STAGING=false #optional
    volumes:
      - ./swag/config:/config
    ports:
      - 443:443
      - 80:80 #optional
    depends_on:
      - frontend
    networks:
      - swag-frontend
    restart: unless-stopped 
  backend:
    volumes:
      - ./backend/src/:/workspace/app/src/
    build: ./backend 
    #Environment Variables: These are passed to the container at runtime. For example, DB_ADDRESS is set to jdbc:mysql://mysql:3306, indicating the application should connect to a MySQL database at the given JDBC URL.
    environment:  # Environment variables for the Spring application
      - DB_ADDRESS=jdbc:mysql://database:3306  # JDBC URL for the MySQL database, 'mysql' is the service name in docker-compose
      - DB_DATABASE=crapmap_db  # The name of the database to use
      - DB_USER=root  # The username for the database
      - DB_PASSWORD=pwd  # The password for the database
    # networks: # add networks when needed
    networks:
      - backend-database
      - backend-frontend
    ports:
      - "8080:8080"  # Exposes port 8080 on the host and maps it to port 8080 in the container
  database:
    build:
      context: ./database
      target: development
    #Environment Variables: Used to configure the MySQL server, like setting the root password (MYSQL_ROOT_PASSWORD) and specifying the database to create at startup (MYSQL_DATABASE).
    environment:  # Environment variables for the MySQL service
      - MYSQL_ROOT_PASSWORD=pwd  # The root password for MySQL
      - MYSQL_DATABASE=crapmap_db  # The database to create when the container starts
    #Volumes: volumes: - mariadb_data:/var/lib/mysql mounts the named volume mariadb_data to /var/lib/mysql inside the container, providing persistent storage for the database.
    volumes:  # Persistent storage for the MySQL database
      - mariadb_data:/var/lib/mysql  # Maps 'mariadb_data' volume to the data directory of MySQL
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    # networks: # add networks when needed
    ports:
      - "3306:3306"  # Exposes port 3306 on the host and maps it to port 3306 in the container
    networks:
      - backend-database
      - backend-frontend
      - datafetcher-database
    

  frontend:  # The React frontend service
    build: 
      context: ./frontend  # Builds the Docker image from the Dockerfile in the './react' directory
      target: development
      args:
        - BACKEND_PROXY=http://backend:8080  # The URL to the backend Spring service
    ports:
      - "3000:3000"  # Exposes port 3000 on the host and maps it to port 3000 in the container
    environment:  # Environment variable for the React service
      - BACKEND_PROXY=http://backend:8080  # The URL to the backend Spring service
    networks:  # Network the React service is connected to
      - backend-frontend  # Network for communicating with the backend service
      - swag-frontend # Network to allow reverse proxy to communicate with frontend
  datafetcher: #python detafetcher service
    build:
      context: ./data-fetcher
      target: development
    environment:  # Environment variables to be used for fastAPI communication
      - DB_ADDRESS=database  # temp url (fix?)
      - DB_DATABASE=crapmap_db  # The name of the database to use
      - DB_USER=root  # The username for the database
      - DB_PASSWORD=pwd  # The password for the database
      - SOCS_API_URL=https://cis-data-service.socs.uoguelph.ca/data/ # The socs data service api url
      - SOCS_API_KEY=YTrifwieYNiAK9ydUiOrvuh1PBZVbIvfiy77vDbQyi9V4ucWh-UK4w # The socs data service api key
    depends_on:
      database: ## added so that fetcher runs after db init
        condition: service_healthy
    networks:
      - datafetcher-database
volumes:
  mariadb_data: #persistent volume to store the mariadb database

networks:  # Defines the networks used by the services
  backend-database: # Network between Backend and Database
  backend-frontend: # Network between Backend and Frontend
  swag-frontend: # Network between swag and frontend
  datafetcher-database: # Network between datafetcher and database